import rh.RS.Cayley
import rh.RS.Det2Outer
import rh.RS.PinchCertificate
import rh.RS.PinchIngredients
import rh.academic_framework.CompletedXi
import rh.Proof.Main
-- keep packaging decoupled to avoid cycles; consumers can import XiExtBridge directly if needed
import rh.RS.BoundaryWedge

/-!
# Pinch wrappers: encode manuscript implications and feed the builder

This file provides light wrappers encoding the two manuscript implications:

- (Wedge ‚Üí Poisson) interior positivity on `Œ© \ Z(Œæ_ext)` for
  `F := 2 ¬∑ J_pinch` (we take the Poisson passage as an input statement);
- (Pinned removable) existence of a removable extension `g` across each
  `Œæ_ext` zero with `g œÅ = 1` and nontriviality.

These wrappers then feed directly into the `buildPinchCertificate` constructor
and the final `RH` conclusion wrapper.
-/

noncomputable section

namespace RH
namespace RS

open Complex Set RH.AcademicFramework.CompletedXi

local notation "Œ©" => RH.RS.Œ©

/-- Wrapper: from a Poisson interior positivity statement for
`F := 2 ¬∑ J_pinch det2 O` on `Œ©`, we obtain the exact ingredient shape needed
by the pinch certificate on `Œ© \ Z(Œæ_ext)` (simple restriction). -/
def hRe_offXi_from_poisson
  (hOuter : ‚àÉ O : ‚ÑÇ ‚Üí ‚ÑÇ, OuterHalfPlane O ‚àß
      BoundaryModulusEq O (fun s => det2 s / riemannXi_ext s))
  (hPoisson : ‚àÄ z ‚àà Œ©,
      0 ‚â§ ((2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)).re)
  : ‚àÄ z ‚àà (Œ© \ {z | riemannXi_ext z = 0}),
      0 ‚â§ ((2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)).re := by
  intro z hz
  exact hPoisson z hz.1

/-- Wrapper: pass pinned‚Äìremovable local data for
`Œò := Œò_pinch_of det2 (choose O)` directly as the `existsRemXi` ingredient. -/
def hRemXi_from_pinned
  (hOuter : ‚àÉ O : ‚ÑÇ ‚Üí ‚ÑÇ, OuterHalfPlane O ‚àß
      BoundaryModulusEq O (fun s => det2 s / riemannXi_ext s))
  -- Pinned data: for each Œæ_ext-zero œÅ pick isolating U, Œò-analytic off œÅ,
  -- and a u-function with Œò = (1-u)/(1+u) on U\{œÅ} and u ‚Üí 0 on ùìù[U\{œÅ}] œÅ,
  -- plus a nontrivial Œò z ‚â† 1.
  (hPinned : ‚àÄ œÅ, œÅ ‚àà Œ© ‚Üí riemannXi_ext œÅ = 0 ‚Üí
      ‚àÉ (U : Set ‚ÑÇ), IsOpen U ‚àß IsPreconnected U ‚àß U ‚äÜ Œ© ‚àß œÅ ‚àà U ‚àß
        (U ‚à© {z | riemannXi_ext z = 0}) = ({œÅ} : Set ‚ÑÇ) ‚àß
        AnalyticOn ‚ÑÇ (Œò_pinch_of det2 (Classical.choose hOuter)) (U \ {œÅ}) ‚àß
        ‚àÉ u : ‚ÑÇ ‚Üí ‚ÑÇ,
          Set.EqOn (Œò_pinch_of det2 (Classical.choose hOuter))
            (fun z => (1 - u z) / (1 + u z)) (U \ {œÅ}) ‚àß
          Filter.Tendsto u (nhdsWithin œÅ (U \ {œÅ})) (nhds (0 : ‚ÑÇ)) ‚àß
          ‚àÉ z, z ‚àà U ‚àß z ‚â† œÅ ‚àß (Œò_pinch_of det2 (Classical.choose hOuter)) z ‚â† 1)
  : ‚àÄ œÅ, œÅ ‚àà Œ© ‚Üí riemannXi_ext œÅ = 0 ‚Üí
      ‚àÉ (U : Set ‚ÑÇ), IsOpen U ‚àß IsPreconnected U ‚àß U ‚äÜ Œ© ‚àß œÅ ‚àà U ‚àß
        (U ‚à© {z | riemannXi_ext z = 0}) = ({œÅ} : Set ‚ÑÇ) ‚àß
        ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, AnalyticOn ‚ÑÇ g U ‚àß
          AnalyticOn ‚ÑÇ (Œò_pinch_of det2 (Classical.choose hOuter)) (U \ {œÅ}) ‚àß
          Set.EqOn (Œò_pinch_of det2 (Classical.choose hOuter)) g (U \ {œÅ}) ‚àß
          g œÅ = 1 ‚àß ‚àÉ z, z ‚àà U ‚àß g z ‚â† 1 := by
  intro œÅ hŒ© hXi
  -- Unpack pinned data, then use the removable-update lemma to build g
  rcases hPinned œÅ hŒ© hXi with
    ‚ü®U, hUopen, hUconn, hUsub, hœÅU, hIsoXi, hŒòU, u, hEq, hu0, z, hzU, hzneq, hŒòz‚ü©
  classical
  let Œò : ‚ÑÇ ‚Üí ‚ÑÇ := Œò_pinch_of det2 (Classical.choose hOuter)
  let g : ‚ÑÇ ‚Üí ‚ÑÇ := Function.update Œò œÅ (1 : ‚ÑÇ)
  have hEqOn : Set.EqOn Œò g (U \ {œÅ}) := by
    intro w hw; simp [g, Function.update_noteq hw.2]
  have hval : g œÅ = 1 := by simp [g]
  have hgU : AnalyticOn ‚ÑÇ g U :=
    RH.RS.analyticOn_update_from_pinned (U := U) (œÅ := œÅ) (Œò := Œò) (u := u)
      hUopen hœÅU hŒòU hEq hu0
  -- Nontriviality: since z ‚â† œÅ and Œò z ‚â† 1, we get g z ‚â† 1
  have hgz_ne1 : g z ‚â† 1 := by
    have : g z = Œò z := by simp [g, Function.update_noteq hzneq]
    intro hz1; exact hŒòz (by simpa [this] using hz1)
  exact ‚ü®U, hUopen, hUconn, hUsub, hœÅU, hIsoXi,
    ‚ü®g, hgU, hŒòU, hEqOn, hval, z, hzU, hgz_ne1‚ü©‚ü©

/-- Build the pinch certificate from: outer existence; (P+) on the boundary
for `F := 2 ¬∑ J_pinch`; a Poisson interior positivity statement; and a pinned‚Äì
removable assignment across each `Œæ_ext` zero. The (P+) hypothesis is threaded
for provenance but not used analytically here. -/
def pinch_certificate_from_PPlus_and_pinned
  (hOuter : ‚àÉ O : ‚ÑÇ ‚Üí ‚ÑÇ, OuterHalfPlane O ‚àß
      BoundaryModulusEq O (fun s => det2 s / riemannXi_ext s))
  (_hPPlus : RH.Cert.PPlus (fun z => (2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)))
  (hPoisson : ‚àÄ z ‚àà Œ©,
      0 ‚â§ ((2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)).re)
  (hPinned : ‚àÄ œÅ, œÅ ‚àà Œ© ‚Üí riemannXi_ext œÅ = 0 ‚Üí
      ‚àÉ (U : Set ‚ÑÇ), IsOpen U ‚àß IsPreconnected U ‚àß U ‚äÜ Œ© ‚àß œÅ ‚àà U ‚àß
        (U ‚à© {z | riemannXi_ext z = 0}) = ({œÅ} : Set ‚ÑÇ) ‚àß
        AnalyticOn ‚ÑÇ (Œò_pinch_of det2 (Classical.choose hOuter)) (U \ {œÅ}) ‚àß
        ‚àÉ u : ‚ÑÇ ‚Üí ‚ÑÇ,
          Set.EqOn (Œò_pinch_of det2 (Classical.choose hOuter)) (fun z => (1 - u z) / (1 + u z)) (U \ {œÅ}) ‚àß
          Filter.Tendsto u (nhdsWithin œÅ (U \ {œÅ})) (nhds (0 : ‚ÑÇ)) ‚àß
          ‚àÉ z, z ‚àà U ‚àß z ‚â† œÅ ‚àß (Œò_pinch_of det2 (Classical.choose hOuter)) z ‚â† 1)
  : PinchCertificateExt := by
  classical
  -- Ingredient 1: interior positivity on Œ© \ Z(Œæ_ext)
  let hRe_offXi := hRe_offXi_from_poisson hOuter hPoisson
  -- Ingredient 2: pinned‚Äìremovable across each Œæ_ext zero
  let hRemXi := hRemXi_from_pinned hOuter hPinned
  -- Build the certificate
  exact RH.RS.buildPinchCertificate hOuter hRe_offXi hRemXi

/-- Final wrapper: from (P+), Poisson interior positivity, and pinned‚Äìremovable
data (together with the outer existence), conclude mathlib's `RiemannHypothesis`.
-/
def RH_from_PPlus_and_pinned
  (hOuter : ‚àÉ O : ‚ÑÇ ‚Üí ‚ÑÇ, OuterHalfPlane O ‚àß
      BoundaryModulusEq O (fun s => det2 s / riemannXi_ext s))
  (_hPPlus : RH.Cert.PPlus (fun z => (2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)))
  (hPoisson : ‚àÄ z ‚àà Œ©,
      0 ‚â§ ((2 : ‚ÑÇ) * (J_pinch det2 (Classical.choose hOuter) z)).re)
  (hPinned : ‚àÄ œÅ, œÅ ‚àà Œ© ‚Üí riemannXi_ext œÅ = 0 ‚Üí
      ‚àÉ (U : Set ‚ÑÇ), IsOpen U ‚àß IsPreconnected U ‚àß U ‚äÜ Œ© ‚àß œÅ ‚àà U ‚àß
        (U ‚à© {z | riemannXi_ext z = 0}) = ({œÅ} : Set ‚ÑÇ) ‚àß
        AnalyticOn ‚ÑÇ (Œò_pinch_of det2 (Classical.choose hOuter)) (U \ {œÅ}) ‚àß
        ‚àÉ u : ‚ÑÇ ‚Üí ‚ÑÇ,
          Set.EqOn (Œò_pinch_of det2 (Classical.choose hOuter)) (fun z => (1 - u z) / (1 + u z)) (U \ {œÅ}) ‚àß
          Filter.Tendsto u (nhdsWithin œÅ (U \ {œÅ})) (nhds (0 : ‚ÑÇ)) ‚àß
          ‚àÉ z, z ‚àà U ‚àß z ‚â† œÅ ‚àß (Œò_pinch_of det2 (Classical.choose hOuter)) z ‚â† 1)
  : RiemannHypothesis := by
  classical
  let C := pinch_certificate_from_PPlus_and_pinned hOuter _hPPlus hPoisson hPinned
  exact RH.Proof.Final.RH_from_pinch_certificate C

end RS
end RH
